-- 1. 테이블, 시퀀스, 트리거 삭제
BEGIN
    FOR rec IN (SELECT table_name FROM user_tables) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;
/

BEGIN
    FOR rec IN (SELECT sequence_name FROM user_sequences) LOOP
        EXECUTE IMMEDIATE 'DROP SEQUENCE ' || rec.sequence_name;
    END LOOP;
END;
/

BEGIN
    FOR rec IN (SELECT trigger_name FROM user_triggers) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || rec.trigger_name;
    END LOOP;
END;
/




-- 2. 시퀀스 생성
CREATE SEQUENCE seq_rank_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_employee_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_ingredient_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_product_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_sale_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_order_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_payment_id START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_report_id START WITH 1 INCREMENT BY 1;



-- 3.1 Rank 테이블 생성
CREATE TABLE "BASIC"."RANK" 
(
    "RID" INT PRIMARY KEY,
    "RankName" VARCHAR(255) NOT NULL,
    "Description" VARCHAR(255)
);

-- 트리거 생성: RID 자동 생성
CREATE OR REPLACE TRIGGER trg_rank_id
BEFORE INSERT ON "BASIC"."RANK"
FOR EACH ROW
WHEN (NEW.RID IS NULL)
BEGIN
    SELECT seq_rank_id.NEXTVAL INTO :NEW.RID FROM dual;
END;
/


-- 3.2 Employees 테이블 생성
CREATE TABLE "BASIC"."EMPLOYEES" 
(
    "EID" INT PRIMARY KEY,
    "ID" VARCHAR(255) NOT NULL,
    "PW" VARCHAR(255) NOT NULL,
    "Name" VARCHAR(255) NOT NULL,
    "Contact" VARCHAR(255) NOT NULL,
    "Rank" INT,
    "JoinDate" DATE,
    FOREIGN KEY ("Rank") REFERENCES "BASIC"."RANK" ("RID")
);

-- 트리거 생성: EID 자동 생성
CREATE OR REPLACE TRIGGER trg_employee_id
BEFORE INSERT ON "BASIC"."EMPLOYEES"
FOR EACH ROW
WHEN (NEW.EID IS NULL)
BEGIN
    SELECT seq_employee_id.NEXTVAL INTO :NEW.EID FROM dual;
END;
/



-- 3.3 IngredientCategories 테이블 생성
CREATE TABLE "BASIC"."INGREDIENTCATEGORIES" 
(
    "CATEGORY_ID" INT PRIMARY KEY,
    "CATEGORY_NAME" VARCHAR(255) NOT NULL
);

-- 트리거 생성: CATEGORY_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_ingredient_category_id
BEFORE INSERT ON "BASIC"."INGREDIENTCATEGORIES"
FOR EACH ROW
WHEN (NEW.CATEGORY_ID IS NULL)
BEGIN
    SELECT seq_ingredient_id.NEXTVAL INTO :NEW.CATEGORY_ID FROM dual;
END;
/



-- 3.4 Ingredients 테이블 생성
CREATE TABLE "BASIC"."INGREDIENTS" 
(
    "INGREDIENT_ID" INT PRIMARY KEY,
    "INGREDIENT_NAME" VARCHAR2(255) NOT NULL,
    "CATEGORY_ID" INT,
    "STOCK" INT NOT NULL,
    "UNIT_PRICE" DECIMAL(10,2) NOT NULL,
    FOREIGN KEY ("CATEGORY_ID") REFERENCES "BASIC"."INGREDIENTCATEGORIES" ("CATEGORY_ID")
);

-- 트리거 생성: INGREDIENT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_ingredient_id
BEFORE INSERT ON "BASIC"."INGREDIENTS"
FOR EACH ROW
WHEN (NEW.INGREDIENT_ID IS NULL)
BEGIN
    SELECT seq_ingredient_id.NEXTVAL INTO :NEW.INGREDIENT_ID FROM dual;
END;
/


-- 3.5 ProductCategories 테이블 생성
CREATE TABLE "BASIC"."PRODUCTCATEGORIES" 
(
    "CATEGORY_ID" INT PRIMARY KEY,
    "CATEGORY_NAME" VARCHAR(255) NOT NULL
);

-- 트리거 생성: CATEGORY_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_product_category_id
BEFORE INSERT ON "BASIC"."PRODUCTCATEGORIES"
FOR EACH ROW
WHEN (NEW.CATEGORY_ID IS NULL)
BEGIN
    SELECT seq_product_id.NEXTVAL INTO :NEW.CATEGORY_ID FROM dual;
END;
/


-- 3.6 Products 테이블 생성
CREATE TABLE "BASIC"."PRODUCTS" 
(
    "PRODUCT_ID" INT PRIMARY KEY,
    "PRODUCT_NAME" VARCHAR2(255) NOT NULL,
    "CATEGORY_ID" INT,
    "PRICE" DECIMAL(10,2) NOT NULL,
    FOREIGN KEY ("CATEGORY_ID") REFERENCES "BASIC"."PRODUCTCATEGORIES" ("CATEGORY_ID")
);

-- 트리거 생성: PRODUCT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_product_id
BEFORE INSERT ON "BASIC"."PRODUCTS"
FOR EACH ROW
WHEN (NEW.PRODUCT_ID IS NULL)
BEGIN
    SELECT seq_product_id.NEXTVAL INTO :NEW.PRODUCT_ID FROM dual;
END;
/


-- 3.7 Sales 테이블 생성
CREATE TABLE "BASIC"."SALES" 
(
    "SALE_ID" INT PRIMARY KEY,
    "SALE_DATE" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "PRODUCT_ID" INT,
    "QUANTITY" INT NOT NULL,
    "TOTAL_PRICE" DECIMAL(10,2) NOT NULL,
    FOREIGN KEY ("PRODUCT_ID") REFERENCES "BASIC"."PRODUCTS" ("PRODUCT_ID")
);

-- 트리거 생성: SALE_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_sale_id
BEFORE INSERT ON "BASIC"."SALES"
FOR EACH ROW
WHEN (NEW.SALE_ID IS NULL)
BEGIN
    SELECT seq_sale_id.NEXTVAL INTO :NEW.SALE_ID FROM dual;
END;
/


-- 3.8 SalesIngredients 테이블 생성
CREATE TABLE "BASIC"."SALESINGREDIENTS" 
(
    "SALE_ID" INT,
    "PRODUCT_ID" INT,
    "INGREDIENT_ID" INT,
    "QUANTITY" INT NOT NULL,
    PRIMARY KEY ("SALE_ID", "PRODUCT_ID", "INGREDIENT_ID"),
    FOREIGN KEY ("SALE_ID") REFERENCES "BASIC"."SALES" ("SALE_ID"),
    FOREIGN KEY ("PRODUCT_ID") REFERENCES "BASIC"."PRODUCTS" ("PRODUCT_ID"),
    FOREIGN KEY ("INGREDIENT_ID") REFERENCES "BASIC"."INGREDIENTS" ("INGREDIENT_ID")
);


-- 3.9 Orders 테이블 생성
CREATE TABLE "BASIC"."ORDERS" 
(
    "ORDER_ID" INT PRIMARY KEY,
    "ORDER_DATE" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "SUPPLIER" VARCHAR2(255),
    "INGREDIENT_ID" INT,
    "QUANTITY" INT NOT NULL,
    "TOTAL_PRICE" DECIMAL(10,2) NOT NULL,
    FOREIGN KEY ("INGREDIENT_ID") REFERENCES "BASIC"."INGREDIENTS" ("INGREDIENT_ID")
);

-- 트리거 생성: ORDER_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_order_id
BEFORE INSERT ON "BASIC"."ORDERS"
FOR EACH ROW
WHEN (NEW.ORDER_ID IS NULL)
BEGIN
    SELECT seq_order_id.NEXTVAL INTO :NEW.ORDER_ID FROM dual;
END;
/


-- 3.10 SalaryReport 테이블 생성
CREATE TABLE "BASIC"."SALARYREPORT" 
(
    "REPORT_ID" INT PRIMARY KEY,
    "REPORT_DATE" DATE,
    "START_DATE" DATE,
    "END_DATE" DATE,
    "TOTAL_EMPLOYEES" INT,
    "TOTAL_SALARY" DECIMAL(10,2)
);

-- 트리거 생성: REPORT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_salary_report_id
BEFORE INSERT ON "BASIC"."SALARYREPORT"
FOR EACH ROW
WHEN (NEW.REPORT_ID IS NULL)
BEGIN
    SELECT seq_report_id.NEXTVAL INTO :NEW.REPORT_ID FROM dual;
END;
/



-- 3.11 SalaryPaymentDetails 테이블 생성
CREATE TABLE "BASIC"."SALARYPAYMENTDETAILS" 
(
    "PAYMENT_ID" INT PRIMARY KEY,
    "EMPLOYEE_ID" INT,
    "PAYMENT_DATE" DATE,
    "AMOUNT" DECIMAL(10,2),
    "REPORT_ID" INT,
    FOREIGN KEY ("EMPLOYEE_ID") REFERENCES "BASIC"."EMPLOYEES" ("EID"),
    FOREIGN KEY ("REPORT_ID") REFERENCES "BASIC"."SALARYREPORT" ("REPORT_ID")
);

-- 트리거 생성: PAYMENT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_salary_payment_id
BEFORE INSERT ON "BASIC"."SALARYPAYMENTDETAILS"
FOR EACH ROW
WHEN (NEW.PAYMENT_ID IS NULL)
BEGIN
    SELECT seq_payment_id.NEXTVAL INTO :NEW.PAYMENT_ID FROM dual;
END;
/


-- 3.12 SalesReport 테이블 생성
CREATE TABLE "BASIC"."SALESREPORT" 
(
    "REPORT_ID" INT PRIMARY KEY,
    "REPORT_DATE" DATE,
    "START_DATE" DATE,
    "END_DATE" DATE,
    "TOTAL_PRODUCTS" INT,
    "TOTAL_QUANTITY" INT,
    "TOTAL_REVENUE" DECIMAL(10,2)
);

-- 트리거 생성: REPORT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_sales_report_id
BEFORE INSERT ON "BASIC"."SALESREPORT"
FOR EACH ROW
WHEN (NEW.REPORT_ID IS NULL)
BEGIN
    SELECT seq_report_id.NEXTVAL INTO :NEW.REPORT_ID FROM dual;
END;
/



-- 3.13 OrderReport 테이블 생성
CREATE TABLE "BASIC"."ORDERREPORT" 
(
    "REPORT_ID" INT PRIMARY KEY,
    "REPORT_DATE" DATE,
    "START_DATE" DATE,
    "END_DATE" DATE,
    "TOTAL_INGREDIENTS" INT,
    "TOTAL_QUANTITY" INT,
    "TOTAL_AMOUNT" DECIMAL(10,2)
);

-- 트리거 생성: REPORT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_order_report_id
BEFORE INSERT ON "BASIC"."ORDERREPORT"
FOR EACH ROW
WHEN (NEW.REPORT_ID IS NULL)
BEGIN
    SELECT seq_report_id.NEXTVAL INTO :NEW.REPORT_ID FROM dual;
END;
/



-- 3.14 ProfitLossStatement 테이블 생성
CREATE TABLE "BASIC"."PROFITLOSSSTATEMENT" 
(
    "REPORT_ID" INT PRIMARY KEY,
    "REPORT_DATE" DATE,
    "TOTAL_REVENUE" DECIMAL(10,2),
    "TOTAL_EXPENSES" DECIMAL(10,2),
    "NET_PROFIT" DECIMAL(10,2)
);

-- 트리거 생성: REPORT_ID 자동 생성
CREATE OR REPLACE TRIGGER trg_profit_loss_id
BEFORE INSERT ON "BASIC"."PROFITLOSSSTATEMENT"
FOR EACH ROW
WHEN (NEW.REPORT_ID IS NULL)
BEGIN
    SELECT seq_report_id.NEXTVAL INTO :NEW.REPORT_ID FROM dual;
END;
/


-- 18. 트리거 생성: 판매 후 재고 업데이트
CREATE OR REPLACE TRIGGER basic.TRG_UPDATE_STOCK_AFTER_SALE
AFTER INSERT ON "BASIC"."SALES"
FOR EACH ROW
DECLARE
    v_product_id NUMBER := :NEW.PRODUCT_ID;
    v_sale_quantity NUMBER := :NEW.QUANTITY;
BEGIN
    -- 재고 업데이트
    FOR ingredient_rec IN (
        SELECT pi.INGREDIENT_ID, 
               pi.QUANTITY * :NEW.QUANTITY AS required_quantity
        FROM "BASIC"."PRODUCTINGREDIENTS" pi
        WHERE pi.PRODUCT_ID = v_product_id
    ) LOOP
        UPDATE "BASIC"."INGREDIENTS"
        SET STOCK = STOCK - ingredient_rec.required_quantity
        WHERE INGREDIENT_ID = ingredient_rec.INGREDIENT_ID
        AND STOCK >= ingredient_rec.required_quantity;
        
        -- 재고 부족 처리
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, '재고 부족: INGREDIENT_ID = ' || ingredient_rec.INGREDIENT_ID);
        END IF;
    END LOOP;
    
    -- 판매된 재료 정보 기록
    INSERT INTO "BASIC"."SALESINGREDIENTS" 
    (
        "SALE_ID", 
        "PRODUCT_ID", 
        "INGREDIENT_ID", 
        "QUANTITY"
    )
    SELECT 
        :NEW.SALE_ID, 
        :NEW.PRODUCT_ID, 
        pi.INGREDIENT_ID, 
        pi.QUANTITY * :NEW.QUANTITY
    FROM "BASIC"."PRODUCTINGREDIENTS" pi
    WHERE pi.PRODUCT_ID = v_product_id;
    
EXCEPTION
    WHEN OTHERS THEN
        -- 예외 발생 시 처리
        RAISE;
END;
/



